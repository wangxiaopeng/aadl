Module("refactor",[Imports([Import("lib-refactoring/behavior-preservation.generated"),Import("check"),Import("lib/nbl-library.generated")]),Rules([RDefNoArgs("rename-refactoring",Rule(NoAnnoList(Tuple([Var("newname"),AnnoList(Var("oldname"),[Var("ref")]),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("ast-changes"),Var("fatal-errors"),Var("errors"),Var("warnings")])),Seq(Assign(Var("ast-after"),App(CallT(SVar("rename-all"),[],[Var("newname"),AnnoList(Var("oldname"),[Var("ref")])]),Var("ast"))),Seq(Assign(Var("ast-changes"),NoAnnoList(List([NoAnnoList(Tuple([Var("ast"),Var("ast-after")]))]))),Seq(Assign(Var("fatal-errors"),NoAnnoList(List([]))),Assign(NoAnnoList(Tuple([Var("errors"),Var("warnings")])),App(Call(SVar("get-semantic-violations"),[CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("constraint-warning")),LChoice(Match(Var("newname")),Match(AnnoList(Var("oldname"),[])))]),Var("ast-changes")))))))),RDefT("rename-all",[],[DefaultVarDec("newname"),DefaultVarDec("oldname")],RuleNoCond(Var("ast"),App(Call(SVar("alltd"),[Call(SVar("preserve-annos"),[SRule(RuleNoCond(Var("oldname"),Var("newname")))])]),Var("ast"))))])])