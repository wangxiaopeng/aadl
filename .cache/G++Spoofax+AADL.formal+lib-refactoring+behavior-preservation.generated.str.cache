Module("lib-refactoring/behavior-preservation.generated",[Imports([Import("lib/editor-common.generated"),Import("lib/analysis-library.generated"),Import("lib-refactoring/namebinding-preservation.generated"),Import("lib-refactoring/correctness-preservation.generated")]),Strategies([SDef("get-semantic-violations",[DefaultVarDec("constraint-error"),DefaultVarDec("constraint-warning")],Call(SVar("get-semantic-violations"),[CallNoArgs(SVar("analyze-ast")),CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("constraint-warning")),Id])),SDef("get-semantic-violations",[DefaultVarDec("constraint-error"),DefaultVarDec("constraint-warning"),DefaultVarDec("is-endangered-name")],Call(SVar("get-semantic-violations"),[CallNoArgs(SVar("analyze-ast")),CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("constraint-warning")),CallNoArgs(SVar("is-endangered-name"))])),RDef("get-semantic-violations",[DefaultVarDec("analyze"),DefaultVarDec("constraint-error"),DefaultVarDec("constraint-warning"),DefaultVarDec("is-endangered-name")],RuleNoCond(Var("ast-changes"),App(Call(SVar("foldr"),[Build(NoAnnoList(Tuple([NoAnnoList(List([])),NoAnnoList(List([]))]))),CallNoArgs(SVar("tuple-conc")),Call(SVar("get-semantic-violations-astchange"),[CallNoArgs(SVar("analyze")),CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("constraint-warning")),CallNoArgs(SVar("is-endangered-name"))])]),Var("ast-changes")))),RDef("get-semantic-violations-astchange",[DefaultVarDec("analyze"),DefaultVarDec("constraint-error"),DefaultVarDec("constraint-warning"),DefaultVarDec("is-endangered-name")],Rule(NoAnnoList(Tuple([Var("ast-before"),Var("ast-after")])),NoAnnoList(Tuple([Var("errors"),Var("warnings")])),Seq(Assign(Var("ast-before-reanalyzed"),App(CallNoArgs(SVar("analyze")),Var("ast-before"))),Seq(Assign(Var("errors-before"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("conc"))]),Var("ast-before-reanalyzed"))),Seq(Assign(Var("warnings-before"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-warning")),CallNoArgs(SVar("conc"))]),Var("ast-before-reanalyzed"))),Seq(Assign(Var("ast-after-reanalyzed"),App(CallNoArgs(SVar("analyze")),Var("ast-after"))),Seq(Assign(Var("errors-after"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("conc"))]),Var("ast-after-reanalyzed"))),Seq(Assign(Var("warnings-after"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-warning")),CallNoArgs(SVar("conc"))]),Var("ast-after-reanalyzed"))),Seq(Assign(Var("namebinding-preservation-errors"),App(Call(SVar("binding-violation-errors"),[CallNoArgs(SVar("is-endangered-name"))]),NoAnnoList(Tuple([Var("ast-after"),Var("ast-after-reanalyzed")])))),Seq(Assign(Var("correctness-preservation-errors"),App(CallNoArgs(SVar("semantic-constraint-preservation-issues")),NoAnnoList(Tuple([Var("errors-before"),Var("errors-after")])))),Seq(Assign(Var("errors"),App(Call(SVar("union"),[CallNoArgs(SVar("same-error-term"))]),NoAnnoList(Tuple([Var("namebinding-preservation-errors"),Var("correctness-preservation-errors")])))),Assign(Var("warnings"),App(CallNoArgs(SVar("semantic-constraint-preservation-issues")),NoAnnoList(Tuple([Var("warnings-before"),Var("warnings-after")]))))))))))))))),RDefNoArgs("same-error-term",Rule(As(Var("err-tup"),NoAnnoList(Tuple([NoAnnoList(Tuple([Var("t1"),Wld])),NoAnnoList(Tuple([Var("t2"),Wld]))]))),Var("err-tup"),LChoice(BA(CallT(SVar("origin-equal"),[],[Var("t1")]),Var("t2")),BA(CallT(SVar("origin-equal"),[],[Var("t2")]),Var("t1"))))),SDefNoArgs("analyze-ast",Seq(Call(SVar("topdown"),[CallNoArgs(SVar("strip-annos"))]),Seq(CallT(SVar("analyze-top"),[],[NoAnnoList(Op("Editor",[])),RootApp(CallNoArgs(SVar("origin-language"))),RootApp(CallNoArgs(SVar("origin-relative-path"))),RootApp(CallNoArgs(SVar("project-path")))]),CallNoArgs(SVar("Fst")))))])])