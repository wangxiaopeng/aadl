Module("lib-refactoring/correctness-preservation.generated",[Imports([Import("libstratego-lib"),Import("lib/editor-common.generated")]),Strategies([RDef("get-correctness-violations",[DefaultVarDec("analyze"),DefaultVarDec("constraint-error"),DefaultVarDec("constraint-warning")],RuleNoCond(Var("ast-changes"),App(Call(SVar("foldr"),[Build(NoAnnoList(Tuple([NoAnnoList(List([])),NoAnnoList(List([]))]))),CallNoArgs(SVar("tuple-conc")),Call(SVar("get-correctness-violations-astchange"),[CallNoArgs(SVar("analyze")),CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("constraint-warning"))])]),Var("ast-changes")))),RDef("get-correctness-violations-astchange",[DefaultVarDec("analyze"),DefaultVarDec("constraint-error"),DefaultVarDec("constraint-warning")],Rule(NoAnnoList(Tuple([Var("ast-before"),Var("ast-after")])),NoAnnoList(Tuple([Var("errors"),Var("warnings")])),Seq(Assign(Var("ast-before-reanalyzed"),App(CallNoArgs(SVar("analyze")),Var("ast-before"))),Seq(Assign(Var("errors-before"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("conc"))]),Var("ast-before-reanalyzed"))),Seq(Assign(Var("warnings-before"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-warning")),CallNoArgs(SVar("conc"))]),Var("ast-before-reanalyzed"))),Seq(Assign(Var("ast-after-reanalyzed"),App(CallNoArgs(SVar("analyze")),Var("ast-after"))),Seq(Assign(Var("errors-after"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("conc"))]),Var("ast-after-reanalyzed"))),Seq(Assign(Var("warnings-after"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-warning")),CallNoArgs(SVar("conc"))]),Var("ast-after-reanalyzed"))),Seq(Assign(Var("errors"),App(CallNoArgs(SVar("semantic-constraint-preservation-issues")),NoAnnoList(Tuple([Var("errors-before"),Var("errors-after")])))),Assign(Var("warnings"),App(CallNoArgs(SVar("semantic-constraint-preservation-issues")),NoAnnoList(Tuple([Var("warnings-before"),Var("warnings-after")]))))))))))))),RDefNoArgs("semantic-constraint-preservation-issues",Rule(NoAnnoList(Tuple([Var("old-issues"),Var("new-issues")])),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("introduced-issues"),Var("solved-issues")]))),Seq(Assign(Var("introduced-issues"),App(Call(SVar("diff"),[CallNoArgs(SVar("is-same-issue"))]),NoAnnoList(Tuple([Var("new-issues"),Var("old-issues")])))),Assign(Var("solved-issues"),App(Seq(Call(SVar("diff"),[CallNoArgs(SVar("is-same-issue"))]),Call(SVar("map"),[Build(NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("Fst"))),NoAnnoList(StringQuotation1("                                                                ",[QStr("SOLVED, "),StringEscape1("                                                                        ",RootApp(CallNoArgs(SVar("Snd"))))]))])))])),NoAnnoList(Tuple([Var("old-issues"),Var("new-issues")]))))))),RDefNoArgs("is-same-issue",Rule(As(Var("issue-tuple"),NoAnnoList(Tuple([NoAnnoList(Tuple([Var("trm1"),Var("message1")])),NoAnnoList(Tuple([Var("trm2"),Var("message2")]))]))),Var("issue-tuple"),[WhereClause(LChoice(BA(CallT(SVar("origin-equal"),[],[Var("trm1")]),Var("trm2")),BA(CallT(SVar("origin-equal"),[],[Var("trm2")]),Var("trm1")))),WhereClause(LChoice(BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("message1"),Var("message2")]))),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([App(Seq(CallNoArgs(SVar("has-annos")),CallNoArgs(SVar("get-annos"))),Var("trm1")),App(CallNoArgs(SVar("get-annos")),Var("trm2"))])))))])),RDefNoArgs("tuple-conc",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Tuple([Var("errs1"),Var("warns1")])),NoAnnoList(Tuple([Var("errs2"),Var("warns2")]))])),NoAnnoList(Tuple([App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("errs1"),Var("errs2")]))),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("warns1"),Var("warns2")])))]))))])])